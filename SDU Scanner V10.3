// ==UserScript==
// @name         SDU Scanner V10.3
// @namespace    http://tampermonkey.net/
// @version      10.3
// @description  Trova la percentuale piÃ¹ alta di SDU trovate nel range di distanza dalla flotta, per funzionare la scheda della flotta specificata deve essere quella aperta per ultima
// @author       lucadjr
// @match        *://*atlas.eveeye.com/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';
    let titolo = 'SDU Scanner V10.3 by lucadjr';
    let currentX = 0, currentY = 0;
    let fleetName = 'My Fleet';
    let maxDistance1 = 5;
    let selectedColor = 'yellow';
    let fuel = 0;
    let foodValue = 0;
    let incidenza_sdu = 0.7;
    let incidenza_count = 0.3;

    function makeDraggable(el) {
        el.style.position = 'absolute';
        el.style.cursor = 'move';
        let offsetX = 0, offsetY = 0, mouseX = 0, mouseY = 0;

        const onMouseMove = (e) => {
            e.preventDefault();
            offsetX = mouseX - e.clientX;
            offsetY = mouseY - e.clientY;
            mouseX = e.clientX;
            mouseY = e.clientY;
            el.style.top = (el.offsetTop - offsetY) + "px";
            el.style.left = (el.offsetLeft - offsetX) + "px";
        };

        const onMouseDown = (e) => {
            if (['input', 'textarea', 'button', 'table', 'label', 'select'].includes(e.target.tagName.toLowerCase())) {
                return;
            }
            e.preventDefault();
            mouseX = e.clientX;
            mouseY = e.clientY;
            document.addEventListener('mousemove', onMouseMove);
            document.addEventListener('mouseup', onMouseUp);
        };

        const onMouseUp = () => {
            document.removeEventListener('mousemove', onMouseMove);
            document.removeEventListener('mouseup', onMouseUp);
        };

        el.addEventListener('mousedown', onMouseDown);
    }

    const container = document.createElement('div');
    container.style.position = 'fixed';
    container.style.top = '10px';
    container.style.right = '10px';
    container.style.zIndex = 1000;
    container.style.padding = '10px';
    container.style.backgroundColor = '#f9f9f9';
    container.style.border = '1px solid #ccc';
    container.style.borderRadius = '5px';
    container.style.width = '400px';
    container.style.maxHeight = '700px';
    //container.style.border = '1px solid black'; // Aggiungi questa linea
    document.body.appendChild(container);
    makeDraggable(container);

    const closeButton = document.createElement('button');
    closeButton.textContent = 'X';
    closeButton.style.position = 'absolute';
    closeButton.style.top = '5px';
    closeButton.style.right = '5px';
    closeButton.style.backgroundColor = 'red';
    closeButton.style.color = 'white';
    closeButton.style.border = 'none';
    closeButton.style.borderRadius = '50%';
    closeButton.style.width = '25px';
    closeButton.style.height = '25px';
    closeButton.style.cursor = 'pointer';

    closeButton.onclick = function () {
        container.remove(); // Rimuove il div dal DOM
    };
    container.appendChild(closeButton);

    const headerContainer = document.createElement('div');
    headerContainer.style.marginBottom = '10px';
    //headerContainer.style.border = '1px solid black'; // Aggiungi questa linea
    container.appendChild(headerContainer);

    // Aggiungere l'icona (puoi usare un'icona font o un'immagine)
    const icon = document.createElement('img');
    icon.src = 'https://play.staratlas.com/icon-small.png'; // Usa il tuo URL o icona
    icon.alt = 'Icona';
    icon.style.marginRight = '10px'; // Distanza tra icona e testo
    headerContainer.appendChild(icon);

    // Aggiungere il titolo
    const title = document.createElement('span');
    title.textContent = titolo;
    title.style.fontSize = '20px';
    title.style.fontWeight = 'bold';
    headerContainer.appendChild(title);

    const currentPosition = document.createElement('div');
    currentPosition.textContent = 'Posizione attuale: N/A';
    currentPosition.style.marginBottom = '10px';
    currentPosition.style.backgroundColor = 'red';
    //currentPosition.style.border = '1px solid black'; // Aggiungi questa linea
    container.appendChild(currentPosition);

    const inputContainer = document.createElement('div');
    inputContainer.style.display = 'flex';
    inputContainer.style.marginBottom = '10px';
    //inputContainer.style.border = '1px solid black'; // Aggiungi questa linea
    container.appendChild(inputContainer);

    const fleetInputContainer = document.createElement('div');
    fleetInputContainer.style.display = 'flex';
    fleetInputContainer.style.flexDirection = 'column'; // Cambia l'orientamento a verticale
    fleetInputContainer.style.margin = '5px';
    //fleetInputContainer.style.border = '1px solid black'; // Aggiungi questa linea
    inputContainer.appendChild(fleetInputContainer);

    const fleetInputLabel = document.createElement('label');
    fleetInputLabel.textContent = 'Nome Flotta: ';
    fleetInputLabel.style.marginBottom = '5px'; // Spazio sotto l'etichetta
    fleetInputContainer.appendChild(fleetInputLabel);

    const fleetInput = document.createElement('input');
    fleetInput.type = 'text';
    fleetInput.value = fleetName;
    fleetInput.size = '15'
    fleetInput.style.padding = '5px';
    fleetInput.style.boxSizing = 'border-box';
    fleetInput.addEventListener('input', (e) => {
        fleetName = e.target.value;
    });
    fleetInputContainer.appendChild(fleetInput);

    const percLabel = document.createElement('label');
    percLabel.textContent = '%';
    percLabel.style.marginBottom = '5px'; // Spazio sotto l'etichetta
    fleetInputContainer.appendChild(percLabel);

    const coeffLabel = document.createElement('label');
    coeffLabel.textContent = 'Coeff';
    coeffLabel.style.marginBottom = '5px'; // Spazio sotto l'etichetta
    fleetInputContainer.appendChild(coeffLabel);

    const coordResultLabel = document.createElement('label');
    coordResultLabel.textContent = 'Coords';
    coordResultLabel.style.marginBottom = '5px'; // Spazio sotto l'etichetta
    fleetInputContainer.appendChild(coordResultLabel);

    const ocrcheckContainer = document.createElement('div');
    ocrcheckContainer.style.display = 'flex';
    ocrcheckContainer.style.margin = '1px';
    //ocrcheckContainer.style.border = '1px solid black'; // Aggiungi questa linea
    fleetInputContainer.appendChild(ocrcheckContainer);

    const ocrLabel = document.createElement('label');
    ocrLabel.textContent = 'Ocr facilitator ';
    ocrcheckContainer.appendChild(ocrLabel);

    const ocrcheckbox = document.createElement('input');
    ocrcheckbox.type = 'checkbox';
    ocrcheckbox.name = 'ocrenable';
    ocrcheckbox.checked = false;
    ocrcheckbox.addEventListener('change', function () {
        if (ocrcheckbox.checked) {
            ocrsizeContainer.style.visibility = 'visible';
            colorSelect.style.display = 'block';
        } else {
            ocrsizeContainer.style.visibility = 'hidden';
            colorSelect.style.display = 'none'; // Inizialmente nascosto
            ocrUpdatesize(14);
            selectedColor = 'yellow';
            ocrUpdatecolor(selectedColor);
        }
    });
    ocrcheckContainer.appendChild(ocrcheckbox);

    const ocrsizeContainer = document.createElement('div');
    ocrsizeContainer.style.visibility = 'hidden';
    ocrsizeContainer.style.display = 'center';
    ocrsizeContainer.style.margin = '1px';
    //ocrsizeContainer.style.border = '1px solid black'; // Aggiungi questa linea
    fleetInputContainer.appendChild(ocrsizeContainer);

    const percsizeLabel = document.createElement('label');
    percsizeLabel.textContent = 'Size ';
    ocrsizeContainer.appendChild(percsizeLabel);

    const percsizeInput = document.createElement('input');
    percsizeInput.type = 'number';
    percsizeInput.min = '1';
    percsizeInput.max = '99'; // Limita il numero massimo a 99
    percsizeInput.value = '14';
    percsizeInput.size = '6'; // Limita l'input a due cifre
    percsizeInput.style.padding = '5px';
    percsizeInput.style.boxSizing = 'border-box';
    percsizeInput.addEventListener('input', (e) => {
        let orcsize = 0;
        orcsize = e.target.value ? parseInt(e.target.value, 10) : Infinity;
        ocrUpdatesize(orcsize);
    });
    ocrsizeContainer.appendChild(percsizeInput);

    const percsizeLabel2 = document.createElement('label');
    percsizeLabel2.textContent = 'px';
    ocrsizeContainer.appendChild(percsizeLabel2);

    // Creazione del menu a tendina (select)
    const colorSelect = document.createElement('select');
    colorSelect.style.display = 'none';
    const colors = ['yellow', 'red', 'green', 'blue', 'pink', 'orange'];
    colors.forEach(color => {
        const option = document.createElement('option');
        option.value = color;
        option.textContent = color;
        colorSelect.appendChild(option);
    });
    colorSelect.addEventListener('change', function () {
        selectedColor = colorSelect.value; // Colore selezionato
        ocrUpdatecolor(selectedColor);
    });
    fleetInputContainer.appendChild(colorSelect);

    const distanceInputContainer = document.createElement('div');
    distanceInputContainer.style.display = 'flex';
    distanceInputContainer.style.flexDirection = 'column'; // Cambia l'orientamento a verticale
    distanceInputContainer.style.margin = '5px'; // Spazio sopra l'etichetta
    distanceInputContainer.style.marginBottom = '10px';
    //distanceInputContainer.style.border = '1px solid black'; // Aggiungi questa linea
    inputContainer.appendChild(distanceInputContainer);

    const distanceInputLabel = document.createElement('label');
    distanceInputLabel.textContent = 'move by:';
    distanceInputLabel.style.marginBottom = '5px'; // Spazio sotto l'etichetta
    distanceInputContainer.appendChild(distanceInputLabel);

    const distanceInput1 = document.createElement('input');
    distanceInput1.type = 'number';
    distanceInput1.min = '1';
    distanceInput1.max = '99'; // Limita il numero massimo a 99
    distanceInput1.value = '5';
    distanceInput1.size = '6'; // Limita l'input a due cifre
    distanceInput1.style.padding = '5px';
    distanceInput1.style.boxSizing = 'border-box';
    distanceInput1.addEventListener('input', (e) => {
        maxDistance1 = e.target.value ? parseInt(e.target.value, 10) : Infinity;
        updateTable(data);
    });
    distanceInputContainer.appendChild(distanceInput1);



    const percResultLabel = document.createElement('label');
    percResultLabel.textContent = '-';
    percResultLabel.style.fontSize = '14px'; // Modifica la dimensione del font
    percResultLabel.style.backgroundColor = 'yellow'; // Colore di sfondo giallo
    percResultLabel.style.fontWeight = 'bold'; // Testo in grassetto
    percResultLabel.style.margin = '6px';
    percResultLabel.style.width = 'auto';
    distanceInputContainer.appendChild(percResultLabel);



    const coeffResultLabel = document.createElement('label');
    coeffResultLabel.textContent = '-';
    coeffResultLabel.style.fontSize = '14px'; // Modifica la dimensione del font
    coeffResultLabel.style.backgroundColor = 'yellow'; // Colore di sfondo giallo
    coeffResultLabel.style.fontWeight = 'bold'; // Testo in grassetto
    coeffResultLabel.style.margin = '6px';
    coeffResultLabel.style.width = 'auto';
    distanceInputContainer.appendChild(coeffResultLabel);



    const coeffCoordTxt = document.createElement('input');
    coeffCoordTxt.type = 'text';
    coeffCoordTxt.name = 'coeffCoordTxt';
    coeffCoordTxt.size = '5';
    coeffCoordTxt.style.margin = '4px';
    coeffCoordTxt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    distanceInputContainer.appendChild(coeffCoordTxt);

    const percCoordContainer = document.createElement('div');
    percCoordContainer.style.display = 'flex';
    percCoordContainer.style.flexDirection = 'column'; // Cambia l'orientamento a verticale
    percCoordContainer.style.margin = '5px'; // Spazio sopra l'etichetta
    percCoordContainer.style.marginBottom = '10px';
    //percCoordContainer.style.border = '1px solid black'; // Aggiungi questa linea
    inputContainer.appendChild(percCoordContainer);

    const probContainer = document.createElement('div');
    probContainer.style.display = 'flex';
    probContainer.style.margin = '5px';
    //probContainer.style.border = '1px solid black'; // Aggiungi questa linea
    percCoordContainer.appendChild(probContainer);

    const sortProbLabel = document.createElement('label');
    sortProbLabel.textContent = 'sort %';
    probContainer.appendChild(sortProbLabel);

    const sortProbRadio = document.createElement('input');
    sortProbRadio.type = 'radio';
    sortProbRadio.name = 'sortOption';
    sortProbRadio.value = 'prob';
    sortProbRadio.checked = true;
    probContainer.appendChild(sortProbRadio);

    const DistanceContainer = document.createElement('div');
    DistanceContainer.style.display = 'flex';
    DistanceContainer.style.margin = '5px';
    //DistanceContainer.style.border = '1px solid black'; // Aggiungi questa linea
    percCoordContainer.appendChild(DistanceContainer);

    const sortDistanceLabel = document.createElement('label');
    sortDistanceLabel.textContent = 'sort dist.';
    DistanceContainer.appendChild(sortDistanceLabel);

    const sortDistanceRadio = document.createElement('input');
    sortDistanceRadio.type = 'radio';
    sortDistanceRadio.name = 'sortOption';
    sortDistanceRadio.value = 'distance';
    DistanceContainer.appendChild(sortDistanceRadio);

    const CoeffsortCointainer = document.createElement('div');
    CoeffsortCointainer.style.display = 'flex';
    CoeffsortCointainer.style.margin = '5px';
    //CoeffsortCointainer.style.border = '1px solid black'; // Aggiungi questa linea
    percCoordContainer.appendChild(CoeffsortCointainer);

    const sortCoeffLabel = document.createElement('label');
    sortCoeffLabel.textContent = 'sort coeff';
    CoeffsortCointainer.appendChild(sortCoeffLabel);

    const sortCoeffRadio = document.createElement('input');
    sortCoeffRadio.type = 'radio';
    sortCoeffRadio.name = 'sortOption';
    sortCoeffRadio.value = 'distance';
    CoeffsortCointainer.appendChild(sortCoeffRadio);


    const IncidenzaCountLabel = document.createElement('label');
    IncidenzaCountLabel.textContent = 'Inc. count';
    percCoordContainer.appendChild(IncidenzaCountLabel);

    const IncidenzaCountTxt = document.createElement('input');
    IncidenzaCountTxt.name = 'IncidenzaCountTxt';
    IncidenzaCountTxt.type = 'number';
    IncidenzaCountTxt.min = '0';
    IncidenzaCountTxt.max = '1'; // Limita il numero massimo a 99
    IncidenzaCountTxt.step = '0.1'; // Incrementa o diminuisce di 0.1
    IncidenzaCountTxt.value = '0.3';
    IncidenzaCountTxt.size = '2'; // Limita l'input a due cifre
    IncidenzaCountTxt.style.padding = '5px';
    IncidenzaCountTxt.addEventListener('input', (e) => {
        incidenza_count = parseFloat(e.target.value);
    });
    percCoordContainer.appendChild(IncidenzaCountTxt);

    const IncidenzaSduLabel = document.createElement('label');
    IncidenzaSduLabel.textContent = 'Inc. sdu';
    percCoordContainer.appendChild(IncidenzaSduLabel);

    const IncidenzaSduTxt = document.createElement('input');
    IncidenzaSduTxt.name = 'IncidenzaSduTxt';
    IncidenzaSduTxt.type = 'number';
    IncidenzaSduTxt.min = '0';
    IncidenzaSduTxt.max = '1'; // Limita il numero massimo a 99
    IncidenzaSduTxt.step = '0.1'; // Incrementa o diminuisce di 0.1
    IncidenzaSduTxt.value = '0.7';
    IncidenzaSduTxt.size = '2'; // Limita l'input a due cifre
    IncidenzaSduTxt.style.padding = '5px';
    IncidenzaSduTxt.addEventListener('input', (e) => {
        incidenza_sdu = parseFloat(e.target.value);
    }); percCoordContainer.appendChild(IncidenzaSduTxt);

    const percLabelContainer = document.createElement('div');
    percLabelContainer.style.display = 'flex';
    percLabelContainer.style.flexDirection = 'column'; // Cambia l'orientamento a verticale
    percLabelContainer.style.margin = '5px'; // Spazio sopra l'etichetta
    percLabelContainer.style.marginBottom = '10px';
    //percLabelContainer.style.border = '1px solid black'; // Aggiungi questa linea
    inputContainer.appendChild(percLabelContainer);

    const divlimitcontainer = document.createElement('div');
    divlimitcontainer.style.display = 'flex';
    percLabelContainer.appendChild(divlimitcontainer);

    const DistanceLimitLabel = document.createElement('label');
    DistanceLimitLabel.textContent = 'Distance limit ';
    divlimitcontainer.appendChild(DistanceLimitLabel);

    const DistanceLimitcheckbox = document.createElement('input');
    DistanceLimitcheckbox.type = 'checkbox';
    DistanceLimitcheckbox.name = 'distancelimitenable';
    DistanceLimitcheckbox.checked = false;
    DistanceLimitcheckbox.addEventListener('change', function () {
        if (DistanceLimitcheckbox.checked) {
            DistanceLimitContainer.style.display = 'flex';
        } else {
            DistanceLimitContainer.style.display = 'none'; // Inizialmente nascosto
        }
    });
    divlimitcontainer.appendChild(DistanceLimitcheckbox);

    const DistanceLimitContainer = document.createElement('div');
    DistanceLimitContainer.style.display = 'none';
    DistanceLimitContainer.style.flexDirection = 'column';
    DistanceLimitContainer.style.margin = '5px';
    //DistanceLimitContainer.style.border = '1px solid black'; // Aggiungi questa linea
    percLabelContainer.appendChild(DistanceLimitContainer);

    const fuelTxt = document.createElement('input');
    fuelTxt.type = 'text';
    fuelTxt.name = 'fuelTxt';
    fuelTxt.size = '7';
    fuelTxt.style.margin = '4px';
    fuelTxt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    DistanceLimitContainer.appendChild(fuelTxt);

    const SBcoordsTxt = document.createElement('input');
    SBcoordsTxt.type = 'text';
    SBcoordsTxt.name = 'SBcoordsTxt';
    SBcoordsTxt.size = '5';
    SBcoordsTxt.value = '11,-16';
    SBcoordsTxt.style.margin = '4px';
    SBcoordsTxt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    DistanceLimitContainer.appendChild(SBcoordsTxt);

    const maxDistancefromSBTxt = document.createElement('input');
    maxDistancefromSBTxt.type = 'text';
    maxDistancefromSBTxt.name = 'maxDistancefromSBTxt';
    maxDistancefromSBTxt.size = '5';
    maxDistancefromSBTxt.value = '20';
    maxDistancefromSBTxt.style.margin = '4px';
    maxDistancefromSBTxt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    DistanceLimitContainer.appendChild(maxDistancefromSBTxt);

    const AreaLabel = document.createElement('label');
    AreaLabel.textContent = 'max prob area';
    DistanceLimitContainer.appendChild(AreaLabel);

    const cordAreaTxt = document.createElement('input');
    cordAreaTxt.type = 'text';
    cordAreaTxt.name = 'cordAreaTxt';
    cordAreaTxt.size = '5';
    cordAreaTxt.value = '20';
    cordAreaTxt.style.margin = '4px';
    cordAreaTxt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    DistanceLimitContainer.appendChild(cordAreaTxt);

    const probAreaTxt = document.createElement('input');
    probAreaTxt.type = 'text';
    probAreaTxt.name = 'probAreaTxt';
    probAreaTxt.size = '5';
    probAreaTxt.value = '20';
    probAreaTxt.style.margin = '4px';
    probAreaTxt.style.width = '50px'; // Imposta una larghezza specifica in pixel
    DistanceLimitContainer.appendChild(probAreaTxt);

    const button = document.createElement('button');
    button.textContent = 'Avvia Scansione Automatica';
    button.style.flex = '1';
    button.style.padding = '10px';
    button.style.backgroundColor = '#007BFF';
    button.style.color = '#fff';
    button.style.border = 'none';
    button.style.borderRadius = '5px';
    button.style.cursor = 'pointer';
    container.appendChild(button);

    const tablecontainer = document.createElement('div');
    tablecontainer.style.maxHeight = '300px';
    tablecontainer.style.overflowY = 'auto';
    //tablecontainer.style.border = '1px solid black'; // Aggiungi questa linea
    container.appendChild(tablecontainer);

    const table = document.createElement('table');
    table.style.width = '100%';
    table.style.borderCollapse = 'collapse';
    table.style.marginTop = '10px';
    table.style.marginBottom = '10px';
    tablecontainer.appendChild(table);

    const byebyecontainer = document.createElement('div');
    byebyecontainer.style.border = 'solid';
    byebyecontainer.style.borderColor = 'gray';
    //byebyecontainer.style.border = '1px solid black'; // Aggiungi questa linea
    container.appendChild(byebyecontainer);

    const byebye = document.createElement('label');
    byebye.textContent = 'Report bugs, improvements or comment at lucadjr@hotmail.it                        if you like the app please donate 7sZFMdaGCATXsJuWfj19ExnLt9P7RVm4Bykmvz2Jrh5x';
    byebye.style.userSelect = 'text';
    byebyecontainer.appendChild(byebye);
    button.addEventListener('click', toggleScan);

    let intervalId = null;
    function toggleScan() {
        if (intervalId) {
            clearInterval(intervalId);
            intervalId = null;
            button.textContent = 'Avvia Scansione Automatica';
        } else {
            scanData();
            intervalId = setInterval(scanData, 2000);
            button.textContent = 'Arresta Scansione Automatica';
        }
    }
    function scanData() {
        updateFleetPosition();
        const elements = document.querySelectorAll('.sector_sdu_txt');
        const data = [];
        const existingSectors = new Set();
        elements.forEach(el => {
            const prob = el.textContent.trim();
            // Filtra gli elementi con prob validi (non 0% e non vuoti)
            if (prob !== '0%' && prob !== '') {
                const idParts = el.id.split('_');
                const x = parseFloat(idParts[idParts.length - 2]);
                const y = parseFloat(idParts[idParts.length - 1]);
                existingSectors.add(`${x},${y}`);
                // Trova l'elemento <rect> corrispondente
                const rectId = `sector_sdu_${x}_${y}`;
                const rectElement = document.getElementById(rectId);
                // Estrai i parametri dall'elemento <rect>
                const count = rectElement?.getAttribute('count') || 'N/A';
                const sdu = rectElement?.getAttribute('sdu') || 'N/A';
                const time = rectElement?.getAttribute('time') || 'N/A';
                // Estrai solo l'orario da "time" (escludi la data)
                const timeOnly = time.split(' ')[1] || 'N/A';
                // Aggiungi i dati al dataset
                const distance = calculateDistance(currentX, currentY, x, y);
                const coeff = calculateCoeff(prob, count, sdu);
                data.push({ coeff, prob, x, y, distance, count, sdu, time: timeOnly });
            }
        });
        filterData(data);
    }
    function filterData(data) {
        const filtered_data = [];
        data.forEach(el => {
            const x = el.x;
            const y = el.y;
            if (DistanceLimitcheckbox.checked) {
                const starbaseInput = SBcoordsTxt.value.trim();
                const coords = starbaseInput.split(',').map(num => parseFloat(num.trim()));
                if (coords.length !== 2 || isNaN(coords[0]) || isNaN(coords[1])) {
                    alert("Inserisci le coordinate nel formato corretto: x,y (es. 15,-9)");
                    return;
                }
                let starbaseX = 0;
                let starbaseY = 0;
                [starbaseX, starbaseY] = coords;
                const maxDistance = parseInt(maxDistancefromSBTxt.value);
                const distanceFromStarbase = calculateDistance(starbaseX, starbaseY, x, y);
                if (distanceFromStarbase > maxDistance) return; // Esclude i settori troppo lontani
            }
            filtered_data.push(el);
        });
        // Aggiorna l'intestazione della tabella con le nuove colonne
        table.innerHTML = `
                <tr>
                    <th style="border-bottom: 1px solid #ccc;">Coeff</th>
                    <th style="border-bottom: 1px solid #ccc;">Prob (%)</th>
                    <th style="border-bottom: 1px solid #ccc;">Count</th>
                    <th style="border-bottom: 1px solid #ccc;">SDU</th>
                    <th style="border-bottom: 1px solid #ccc;">Distanza</th>
                    <th style="border-bottom: 1px solid #ccc;">Coords</th>
                    <th style="border-bottom: 1px solid #ccc;">Time</th>
                </tr>
            `;
        if (sortProbRadio.checked) {
            filtered_data.sort((a, b) => parseFloat(b.prob) - parseFloat(a.prob));
            updateTable(filtered_data);
        } else if (sortDistanceRadio.checked) {
            filtered_data.sort((a, b) => parseFloat(a.distance) - parseFloat(b.distance));
            updateTable(filtered_data);
        } else {
            filtered_data.sort((a, b) => parseFloat(b.coeff) - parseFloat(a.coeff));
            updateTable(filtered_data);
        }
        // Cerca l'area 5x5 con la probabilitÃ  media maggiore
        const starbaseInput = SBcoordsTxt.value.trim();
        const coords = starbaseInput.split(',').map(num => parseFloat(num.trim()));
        if (coords.length === 2 && !isNaN(coords[0]) && !isNaN(coords[1])) {
            const [starbaseX, starbaseY] = coords;
            const maxDistance = parseInt(maxDistancefromSBTxt.value);
            const bestArea = findBestArea(filtered_data, starbaseX, starbaseY, maxDistance, currentX, currentY);
            cordAreaTxt.value = bestArea ? `${bestArea.x},${bestArea.y}` : 'N/A';
            probAreaTxt.value = bestArea ? parseInt(bestArea.avgProb).toString()+'%' : 'N/A';
            //console.log('Best 5x5 area within maxDistance from starbase:', bestArea);
        }
    }

    function findBestArea(data, starbaseX, starbaseY, maxDistance, currentX, currentY) {
        let bestArea = null;
        let maxAvgProb = -1;
        let bestCell = null;

        // Filtra i dati per includere solo i settori entro maxDistance dalla starbase
        const dati_filtrati_dist_st = data.filter(item => {
            const distanceFromStarbase = calculateDistance(starbaseX, starbaseY, item.x, item.y);
            return distanceFromStarbase <= maxDistance;
        });

        const dati_filtrati_dist_fleet = data.filter(item => {
            const distanceFromFleet = calculateDistance(currentX, currentY, item.x, item.y);
            return distanceFromFleet <= 15;
        });

        // Trova il valore della cella piÃ¹ bassa
        const minProb = Math.min(...dati_filtrati_dist_fleet.map(item => parseFloat(item.prob)));

        dati_filtrati_dist_fleet.forEach(item => {
            const { x, y } = item;
            const avgProb = prob_media_area(x, y, dati_filtrati_dist_fleet, minProb);
            if (avgProb > maxAvgProb) {
                maxAvgProb = avgProb;
                bestArea = { x, y, avgProb };
            }
        });

        if (bestArea) {
            let minDistance = Infinity;
            let closestCell = null;
            // calcola distanza tra il centro dell'area e currentX, currentY
            let distanceToArea = calculateDistance(currentX, currentY, bestArea.x, bestArea.y);
            if (distanceToArea > 6) {

                // Per ogni cella nella zona di interesse, calcoliamo la distanza da currentX, currentY
                for (let dx = -2; dx <= 2; dx++) {
                    for (let dy = -2; dy <= 2; dy++) {
                        const x = bestArea.x + dx;
                        const y = bestArea.y + dy;
                        const sectorData = data.find(item => item.x === x && item.y === y);
                        if (sectorData) {
                            const coeff = calculateCoeff(sectorData.prob, sectorData.count, sectorData.sdu);

                            // Calcola la distanza tra la cella corrente e currentX, currentY
                            const distanceToCurrent = calculateDistance(currentX, currentY, x, y);

                            // Se la distanza Ã¨ la piÃ¹ piccola finora, aggiorna la cella piÃ¹ vicina
                            if (distanceToCurrent < minDistance) {
                                minDistance = distanceToCurrent;
                                closestCell = { x, y, coeff, avgProb: bestArea.avgProb, distanceToCurrent };
                            }
                        }
                    }
                }

                bestCell = closestCell;  // Aggiorna bestCell per restituire la cella piÃ¹ vicina
                
            } else {
                bestCell = { x: bestArea.x, y: bestArea.y, coeff: 0, avgProb: bestArea.avgProb, distanceToCurrent: 0 };
            }

        }

        return bestCell;
    }


    function prob_media_area(centerX, centerY, data, minProb) {
        let totalProb = 0;
        let count = 0;

        for (let dx = -2; dx <= 2; dx++) {
            for (let dy = -2; dy <= 2; dy++) {
                const x = centerX + dx;
                const y = centerY + dy;
                const sectorData = data.find(item => item.x === x && item.y === y);
                if (sectorData) {
                    totalProb += parseFloat(sectorData.prob);
                } else {
                    totalProb += minProb;
                }
                count++;
            }
        }

        return count > 0 ? totalProb / count : 0;
    }
    function trovapercentuale(data, maxDistance, percResultLabel, coeffResultLabel, percCoordTxt) {
        let maxProbInRange = -1;
        let closestToMaxProb = null;

        // Prima, troviamo la probabilitÃ  massima nel range
        data.forEach(item => {
            if (item.distance <= maxDistance) {
                if (parseFloat(item.coeff) > maxProbInRange) {
                    maxProbInRange = parseFloat(item.coeff);
                }
            }
        });

        // Ora, tra le righe con la probabilitÃ  massima, troviamo la piÃ¹ vicina
        let minDistance = Infinity;
        data.forEach(item => {
            if (item.distance <= maxDistance && parseFloat(item.coeff) === maxProbInRange) {
                if (item.distance < minDistance) {
                    minDistance = item.distance;
                    closestToMaxProb = item; // Memorizziamo la riga con la probabilitÃ  massima e la distanza minima
                    percResultLabel.textContent = parseFloat(item.prob).toString() + '%';
                    coeffResultLabel.textContent = parseFloat(item.coeff).toFixed(1).toString();
                    percCoordTxt.value = item.x + ',' + item.y; // Aggiorniamo il campo di input con le coordinate
                }
            }
        });
        return closestToMaxProb;
    }
    function updateTable(data) {
        let closestToMaxCoeFF = trovapercentuale(data, maxDistance1, percResultLabel, coeffResultLabel, coeffCoordTxt);
        // Creiamo la tabella e evidenziamo la riga piÃ¹ vicina
        data.forEach(item => {
            const row = document.createElement('tr');
            row.innerHTML = `<td style="border-bottom: 1px solid #ccc; text-align: center;">${item.coeff.toFixed(1)}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.prob}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.count}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.sdu}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.distance}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.x},${item.y}</td>
                     <td style="border-bottom: 1px solid #ccc; text-align: center;">${item.time}</td>`;
            if (item === closestToMaxCoeFF) {
                row.style.backgroundColor = selectedColor; // Evidenziamo solo la riga piÃ¹ vicina
            }
            if (item.distance == 0 && item.sdu == 1) {
                row.style.backgroundColor = 'red';
            }
            table.appendChild(row);
        });
    }
    function calculateCoeff(prob, count, sdu) {
        return (parseFloat(prob) / ((parseFloat(count) * incidenza_count) + 1) / ((parseFloat(sdu) * incidenza_sdu) + 1))
    }
    function calculateDistance(x1, y1, x2, y2) {
        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)).toFixed(2);
    }
    function updateFleetPosition() {
        const fleetRow = document.querySelector(`#fleetStats .ui_fleet span[oncontextmenu*="${fleetName}"]`);
        if (fleetRow) {
            const stateRow = fleetRow.closest('tr').nextElementSibling;
            const tdElement = stateRow.querySelector('#fleet_selected_state');
            if (tdElement) {
                // Estrai tutte le coordinate presenti nel td
                const coordElements = tdElement.querySelectorAll('.ui_coordinate');
                if (coordElements.length > 0) {
                    // Mappa tutte le coordinate in formato [X, Y]
                    const allCoords = Array.from(coordElements).map(coordElement =>
                        coordElement.textContent.trim().replace('|', ',')
                    );
                    // Prendi l'ultima serie di coordinate
                    const finalCoords = allCoords[allCoords.length - 1];
                    [currentX, currentY] = finalCoords.split(',').map(coord => parseFloat(coord.trim()));
                    // Aggiorna il textContent con un messaggio flessibile
                    const scenarioDescription = tdElement.textContent
                        .replace(/\s+/g, ' ') // Rimuove spazi multipli
                        .trim();
                    currentPosition.textContent = `${scenarioDescription.replace('|', ',')}`;
                    currentPosition.style.backgroundColor = 'green';
                } else {
                    // Nessuna coordinata trovata
                    currentPosition.textContent = 'Posizione attuale: N/A';
                    currentPosition.style.backgroundColor = 'red';
                }
            } else {
                currentPosition.textContent = 'Posizione attuale: N/A';
                currentPosition.style.backgroundColor = 'red';
            }
        } else {
            currentPosition.textContent = 'Posizione attuale: N/A';
            currentPosition.style.backgroundColor = 'red';
        }
        // Seleziona l'elemento che contiene il titolo
        let fuelBarElement = document.getElementById("fleet_selected_fuel_bar");
        // Controlla se l'attributo title esiste
        if (fuelBarElement && fuelBarElement.firstElementChild) {
            let titleText = fuelBarElement.firstElementChild.getAttribute("title");
            // Trova la percentuale usando una regex
            let match = titleText.match(/\((\d+)%\)/);
            if (match) {
                fuel = match[1]; // Estrai solo il numero

                // Inserisci la percentuale in un elemento con id "fuelPercentageDisplay"
                fuelTxt.value = fuel + "%";
                maxDistancefromSBTxt.value = fuel > 30 ? 20 : Math.max(6, Math.floor((fuel / 30) * 20));
                //maxDistancefromSBTxt.value = fuel > 30 ? 20 : Math.floor((fuel / 30) * 20);
            }
        }
        // Seleziona l'elemento con l'id "fleet_selected_cargo"
        let cargoElement = document.getElementById("fleet_selected_cargo");
        if (cargoElement) {
            let cargoText = cargoElement.innerHTML;
            // Estrarre la percentuale tra parentesi (es. 93%)
            let percentageMatch = cargoText.match(/\((\d+)%\)/);
            // Estrarre il numero prima di "Food" (es. 31124)
            let foodMatch = cargoText.match(/([\d,.]+)\s*<span style="color:#08f414">Food<\/span>/);
            foodValue = foodMatch ? foodMatch[1] : "N/A";
        }
    }
    function ocrUpdatesize(size) {
        let sizestr = String(size) + 'px';
        coeffResultLabel.style.fontSize = sizestr; // Modifica la dimensione del font
        coeffCoordTxt.style.fontSize = sizestr; // Modifica la dimensione del font
        let sizeelement = String(50 + 3 * (size - 13)) + 'px';
        coeffCoordTxt.style.width = sizeelement;
    }
    function ocrUpdatecolor(color) {
        coeffResultLabel.style.backgroundColor = color; // Colore di sfondo giallo
    }
})();
